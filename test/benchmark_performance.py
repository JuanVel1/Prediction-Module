#!/usr/bin/env python3
"""
Script de benchmark para comparar rendimiento del procesamiento de archivos NC
"""

import time
import os
import sys
from pathlib import Path
import gc
from typing import Dict, Any, Optional

# Importaci√≥n opcional de psutil
try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False
    print("‚ö†Ô∏è psutil no disponible - medici√≥n de memoria limitada")

class PerformanceBenchmark:
    def __init__(self) -> None:
        self.results: Dict[str, Dict[str, Any]] = {}
        self.start_time: Optional[float] = None
        self.start_memory: Optional[float] = None
        self.test_name: Optional[str] = None
        
    def _get_memory_usage(self) -> float:
        """Obtiene el uso de memoria actual"""
        if not PSUTIL_AVAILABLE:
            return 0.0
            
        try:
            return psutil.Process().memory_info().rss / 1024 / 1024  # type: ignore # MB
        except (psutil.NoSuchProcess, psutil.AccessDenied, AttributeError):
            return 0.0
        
    def start_measurement(self, test_name: str) -> None:
        """Inicia medici√≥n de tiempo y memoria"""
        self.test_name = test_name
        self.start_time = time.time()
        self.start_memory = self._get_memory_usage()
        gc.collect()
        print(f"üéØ Iniciando benchmark: {test_name}")
        
    def end_measurement(self, rows_processed: int = 0, files_processed: int = 0) -> None:
        """Termina medici√≥n y guarda resultados"""
        if self.start_time is None or self.test_name is None:
            print("‚ùå Error: No se ha iniciado ninguna medici√≥n")
            return
            
        end_time = time.time()
        end_memory = self._get_memory_usage()
        
        duration = end_time - self.start_time
        memory_used = end_memory - (self.start_memory or 0.0)
        
        self.results[self.test_name] = {
            'duration': duration,
            'memory_used': memory_used,
            'peak_memory': end_memory,
            'rows_processed': rows_processed,
            'files_processed': files_processed,
            'rows_per_second': rows_processed / duration if duration > 0 else 0,
            'files_per_second': files_processed / duration if duration > 0 else 0
        }
        
        print(f"‚úÖ {self.test_name} completado en {duration:.2f}s")
        print(f"   üìä {rows_processed:,} filas | {files_processed} archivos")
        if PSUTIL_AVAILABLE:
            print(f"   üíæ Memoria: {memory_used:.1f}MB | Pico: {end_memory:.1f}MB")
        print(f"   ‚ö° Velocidad: {self.results[self.test_name]['rows_per_second']:,.0f} filas/seg")
        
        # Reset para pr√≥xima medici√≥n
        self.start_time = None
        self.start_memory = None
        self.test_name = None
        
    def compare_results(self) -> None:
        """Compara resultados entre diferentes m√©todos"""
        if len(self.results) < 2:
            print("‚ö†Ô∏è Necesitas al menos 2 resultados para comparar")
            return
            
        print("\n" + "="*80)
        print("üìä COMPARACI√ìN DE RENDIMIENTO")
        print("="*80)
        
        # Tabla de resultados
        print(f"{'M√©todo':<25} {'Tiempo':<10} {'Filas/seg':<12} {'Memoria':<10} {'Archivos/seg':<12}")
        print("-" * 80)
        
        # Calcular mejores valores evitando divisi√≥n por cero
        durations = [r['duration'] for r in self.results.values() if r['duration'] > 0]
        speeds = [r['rows_per_second'] for r in self.results.values() if r['rows_per_second'] > 0]
        memories = [r['memory_used'] for r in self.results.values() if r['memory_used'] > 0]
        
        best_time = min(durations) if durations else 1.0
        best_speed = max(speeds) if speeds else 1.0
        best_memory = min(memories) if memories else 1.0
        
        for name, result in self.results.items():
            print(f"{name:<25} {result['duration']:.1f}s {result['rows_per_second']:>10,.0f} {result['memory_used']:>8.1f}MB {result['files_per_second']:>10.1f}")
            
        print("\nüèÜ MEJORES RESULTADOS:")
        
        if durations:
            fastest_method = min(self.results.keys(), key=lambda k: self.results[k]['duration'])
            print(f"   ‚ö° M√°s r√°pido: {fastest_method}")
            
        if memories:
            most_efficient = min(self.results.keys(), key=lambda k: self.results[k]['memory_used'])
            print(f"   üíæ Menos memoria: {most_efficient}")
            
        if speeds:
            fastest_processing = max(self.results.keys(), key=lambda k: self.results[k]['rows_per_second'])
            print(f"   üìä Mayor throughput: {fastest_processing}")
        
        # Calcular mejoras si hay exactamente 2 resultados
        if len(self.results) == 2:
            methods = list(self.results.keys())
            old_result = self.results[methods[0]]
            new_result = self.results[methods[1]]
            
            # Evitar divisi√≥n por cero
            speed_improvement = (
                new_result['rows_per_second'] / old_result['rows_per_second'] 
                if old_result['rows_per_second'] > 0 else 1.0
            )
            time_improvement = (
                old_result['duration'] / new_result['duration'] 
                if new_result['duration'] > 0 else 1.0
            )
            memory_improvement = (
                old_result['memory_used'] / new_result['memory_used'] 
                if new_result['memory_used'] > 0 else 1.0
            )
            
            print(f"\nüöÄ MEJORAS OBTENIDAS:")
            print(f"   ‚ö° Velocidad: {speed_improvement:.1f}x m√°s r√°pido")
            print(f"   ‚è±Ô∏è Tiempo: {time_improvement:.1f}x menor duraci√≥n")
            print(f"   üíæ Memoria: {memory_improvement:.1f}x m√°s eficiente")

def benchmark_system_info() -> None:
    """Muestra informaci√≥n del sistema para el benchmark"""
    cpu_count = os.cpu_count() or 1
    
    if PSUTIL_AVAILABLE:
        try:
            memory_gb = psutil.virtual_memory().total / (1024**3)
            available_gb = psutil.virtual_memory().available / (1024**3)
        except:
            memory_gb = 0.0
            available_gb = 0.0
    else:
        memory_gb = 0.0
        available_gb = 0.0
    
    print("üñ•Ô∏è INFORMACI√ìN DEL SISTEMA")
    print("="*50)
    print(f"CPUs: {cpu_count}")
    if PSUTIL_AVAILABLE:
        print(f"Memoria RAM: {memory_gb:.1f} GB")
        print(f"Memoria disponible: {available_gb:.1f} GB")
    else:
        print("Memoria: No disponible (instala psutil)")
    print(f"Python: {sys.version.split()[0]}")
    
    # Verificar dependencias de optimizaci√≥n
    optimizations = []
    
    try:
        import pyarrow  # type: ignore
        optimizations.append("‚úÖ PyArrow (Parquet r√°pido)")
    except ImportError:
        optimizations.append("‚ùå PyArrow (no disponible)")
    
    try:
        import numba  # type: ignore
        optimizations.append("‚úÖ Numba (JIT compilation)")
    except ImportError:
        optimizations.append("‚ùå Numba (no disponible)")
        
    try:
        import h5netcdf  # type: ignore
        optimizations.append("‚úÖ h5netcdf (NetCDF r√°pido)")
    except ImportError:
        optimizations.append("‚ùå h5netcdf (no disponible)")
        
    try:
        import dask  # type: ignore
        optimizations.append("‚úÖ Dask (procesamiento distribuido)")
    except ImportError:
        optimizations.append("‚ùå Dask (no disponible)")
    
    if PSUTIL_AVAILABLE:
        optimizations.append("‚úÖ PSUtil (monitoreo de sistema)")
    else:
        optimizations.append("‚ùå PSUtil (no disponible)")
    
    print(f"\nüîß Optimizaciones disponibles:")
    for opt in optimizations:
        print(f"   {opt}")
    print()

def run_quick_benchmark() -> None:
    """Ejecuta un benchmark r√°pido con datos simulados"""
    print("üèÉ‚Äç‚ôÇÔ∏è Ejecutando benchmark r√°pido...")
    
    benchmark = PerformanceBenchmark()
    
    try:
        # Simular procesamiento tradicional
        benchmark.start_measurement("Threading Original")
        time.sleep(2.0)  # Simular procesamiento lento
        benchmark.end_measurement(rows_processed=100000, files_processed=10)
        
        # Simular procesamiento optimizado
        benchmark.start_measurement("Multiprocessing + Parquet")
        time.sleep(0.3)  # Simular procesamiento r√°pido
        benchmark.end_measurement(rows_processed=100000, files_processed=10)
        
        benchmark.compare_results()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Benchmark interrumpido por el usuario")
    except Exception as e:
        print(f"‚ùå Error durante el benchmark: {e}")

def run_real_benchmark() -> None:
    """Ejecuta benchmark con datos reales si est√°n disponibles"""
    print("üìä Preparando benchmark con datos reales...")
    
    # Verificar si existen archivos de datos
    project_root = Path(__file__).parent
    data_path = project_root / 'public' / 'datasets' / 'Datos_humedad_suelo_CDS.zip'
    
    if not data_path.exists():
        print(f"‚ùå No se encontr√≥ el archivo de datos: {data_path}")
        print("   Ejecutando benchmark simulado en su lugar...")
        run_quick_benchmark()
        return
    
    print("‚úÖ Datos encontrados, ejecutando benchmark real...")
    print("‚ö†Ô∏è Esto puede tomar varios minutos...")
    
    benchmark = PerformanceBenchmark()
    
    try:
        # Aqu√≠ se ejecutar√≠a el benchmark real
        print("üîÑ Para benchmark completo ejecuta manualmente:")
        print("   1. python classes/LandSide.py")
        print("   2. Anota los tiempos y resultados")
        print("   3. Compara con versiones anteriores")
        
    except Exception as e:
        print(f"‚ùå Error durante el benchmark real: {e}")

def validate_choice(choice: str) -> bool:
    """Valida la elecci√≥n del usuario"""
    return choice.strip() in ['1', '2', '3', '4']

def main() -> None:
    """Funci√≥n principal del benchmark"""
    print("üöÄ BENCHMARK DE RENDIMIENTO - LANDSIDE PROCESSOR")
    print("=" * 80)
    
    benchmark_system_info()
    
    # Opciones de benchmark
    print("Opciones de benchmark:")
    print("1. Benchmark r√°pido (simulado)")
    print("2. Benchmark con datos reales")
    print("3. Solo mostrar informaci√≥n del sistema")
    print("4. Salir")
    
    try:
        choice = input("\nSelecciona una opci√≥n (1-4): ").strip()
        
        if not validate_choice(choice):
            print("‚ùå Opci√≥n no v√°lida. Usa n√∫meros del 1 al 4.")
            return
        
        if choice == "1":
            run_quick_benchmark()
        elif choice == "2":
            run_real_benchmark()
        elif choice == "3":
            print("‚ÑπÔ∏è Informaci√≥n del sistema mostrada arriba")
        elif choice == "4":
            print("üëã ¬°Hasta luego!")
        
    except KeyboardInterrupt:
        print("\nüëã Benchmark cancelado por el usuario")
    except EOFError:
        print("\n‚ùå Error de entrada. Terminando...")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

if __name__ == "__main__":
    main() 